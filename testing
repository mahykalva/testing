import logging
from google.cloud import bigquery

class BigQueryHandler:
    """
    A class to handle BigQuery operations using the Google Cloud BigQuery Python client library.

    Parameters:
    - project_id (str): The ID of the Google Cloud project.

    Methods:
    - get_remove_table: Remove a BigQuery table.
    - get_remove_dataset: Remove a BigQuery dataset.
    - get_delete_data: Delete data from a BigQuery table.
    - get_update_table_data: Update data in a BigQuery table.
    - get_copy_table_data: Copy data from one BigQuery table to another.
    """

    def __init__(self, project_id: str):
        """
        Initialize the BigQueryHandler.

        Parameters:
        - project_id (str): The ID of the Google Cloud project.
        """
        self._validate_project_id(project_id)
        self.project_id = project_id
        self.client = bigquery.Client(project=project_id)
        logging.basicConfig(level=logging.INFO)

    def _validate_project_id(self, project_id):
        """
        Validate the project ID.

        Parameters:
        - project_id (str): The project ID to validate.

        Raises:
        - ValueError: If the project ID is not a valid string.
        """
        if not project_id or not isinstance(project_id, str):
            raise ValueError("Invalid project_id. Please provide a valid string.")

    def _validate_dataset_table_names(self, dataset, table):
        """
        Validate the dataset and table names.

        Parameters:
        - dataset (str): The name of the BigQuery dataset.
        - table (str): The name of the BigQuery table.

        Raises:
        - ValueError: If the dataset or table name is not a valid string.
        """
        if not dataset or not isinstance(dataset, str):
            raise ValueError("Invalid dataset name. Please provide a valid string.")
        if table is not None and (not isinstance(table, str)):
            raise ValueError("Invalid table name. Please provide a valid string.")

    def _dataset_exists(self, dataset_id):
        """
        Check if a BigQuery dataset exists.

        Parameters:
        - dataset_id (str): The ID of the BigQuery dataset.

        Returns:
        - bool: True if the dataset exists, False otherwise.
        """
        dataset_ref = self.client.dataset(dataset_id)
        try:
            self.client.get_dataset(dataset_ref)
            return True
        except Exception as e:
            return False

    def _table_exists(self, dataset_id, table_id):
        """
        Check if a BigQuery table exists.

        Parameters:
        - dataset_id (str): The ID of the BigQuery dataset.
        - table_id (str): The ID of the BigQuery table.

        Returns:
        - bool: True if the table exists, False otherwise.
        """
        dataset_ref = self.client.dataset(dataset_id)
        table_ref = dataset_ref.table(table_id)

        try:
            self.client.get_table(table_ref)
            return True
        except Exception as e:
            return False

    def _validate_set_values(self, set_values):
        """
        Validate the set_values parameter for update operation.

        Parameters:
        - set_values (dict): A dictionary where keys are column names and values are the new values to set.

        Raises:
        - ValueError: If set_values is not a valid dictionary.
        """
        if not set_values or not isinstance(set_values, dict):
            raise ValueError("Invalid set_values. Please provide a valid dictionary.")

    def _validate_where_condition(self, where_condition):
        """
        Validate the where_condition parameter for delete and update operations.

        Parameters:
        - where_condition (str): The WHERE clause condition.

        Raises:
        - ValueError: If where_condition is not a valid string.
        """
        if where_condition is not None and not isinstance(where_condition, str):
            raise ValueError("Invalid where_condition. Please provide a valid string.")

    def get_remove_table(self, dataset: str, table: str):
        """
        Remove a BigQuery table.

        Parameters:
        - dataset (str): The name of the BigQuery dataset.
        - table (str): The name of the BigQuery table.
        """
        self._validate_dataset_table_names(dataset, table)

        if self._table_exists(dataset, table):
            query = f'DROP TABLE `{self.project_id}.{dataset}.{table}`'
            self.client.query(query).result()
            logging.info(f'Table `{self.project_id}.{dataset}.{table}` removed successfully.')
        else:
            logging.warning(f'Table `{self.project_id}.{dataset}.{table}` does not exist.')

    def get_remove_dataset(self, dataset: str):
        """
        Remove a BigQuery dataset.

        Parameters:
        - dataset (str): The name of the BigQuery dataset.
        """
        self._validate_dataset_table_names(dataset, None)

        if self._dataset_exists(dataset):
            query = f'DROP SCHEMA `{self.project_id}.{dataset}`'
            self.client.query(query).result()
            logging.info(f'Dataset `{self.project_id}.{dataset}` removed successfully.')
        else:
            logging.warning(f'Dataset `{self.project_id}.{dataset}` does not exist.')

    def get_delete_data(self, dataset: str, table: str, where_condition: str = None):
        """
        Delete data from a BigQuery table.

        Parameters:
        - dataset (str): The name of the BigQuery dataset.
        - table (str): The name of the BigQuery table.
        - where_condition (str, optional): Optional WHERE clause condition for deletion.
        """
        self._validate_dataset_table_names(dataset, table)

        if self._table_exists(dataset, table):
            if where_condition:
                query = f"DELETE FROM `{self.project_id}.{dataset}.{table}` WHERE {where_condition}"
            else:
                query = f"DELETE FROM `{self.project_id}.{dataset}.{table}` WHERE TRUE"

            self.client.query(query).result()
            logging.info(f'Data deleted from `{self.project_id}.{dataset}.{table}`.')
        else:
            logging.warning(f'Table `{self.project_id}.{dataset}.{table}` does not exist. No data deleted.')

    def get_update_table_data(self, dataset: str, table: str, set_values: dict, where_condition: str = None):
        """
        Update data in a BigQuery table.

        Parameters:
        - dataset (str): The name of the BigQuery dataset.
        - table (str): The name of the BigQuery table.
        - set_values (dict): A dictionary where keys are column names and values are the new values to set.
        - where_condition (str, optional): WHERE condition to specify which rows to update. If None, all rows will be updated.
        """
        self._validate_dataset_table_names(dataset, table)
        self._validate_set_values(set_values)
        self._validate_where_condition(where_condition)

        def format_value(value):
            return f"'{value}'" if isinstance(value, str) else value

        set_clause = ', '.join([f'{column} = {format_value(value)}' for column, value in set_values.items()])
        where_clause = f'WHERE {where_condition}' if where_condition else ''

        sql_query = f"""
                UPDATE `{self.project_id}.{dataset}.{table}`
                SET {set_clause}
                {where_clause}
            """
        logging.info(sql_query)
        if self._table_exists(dataset, table):
            self.client.query(sql_query).result()
            logging.info(f'Data Updated from `{self.project_id}.{dataset}.{table}`.')
        else:
            logging.warning(f'Table `{self.project_id}.{dataset}.{table}` does not exist. No data updated.')

    def get_copy_table_data(self, from_dataset_name: str, from_table_name: str,
                            to_dataset_name: str, to_table_name: str, flag: str):
        """
        Copy data from one BigQuery table to another.

        Parameters:
        - from_dataset_name (str): The name of the source BigQuery dataset.
        - from_table_name (str): The name of the source BigQuery table.
        - to_dataset_name (str): The name of the destination BigQuery dataset.
        - to_table_name (str): The name of the destination BigQuery table.
        - flag (str): Flag to specify whether to truncate ('T') or append ('A') data.

        Raises:
        - ValueError: If flag is not 'T' for truncate or 'A' for append.
        """
        self._validate_dataset_table_names(from_dataset_name, from_table_name)
        self._validate_dataset_table_names(to_dataset_name, to_table_name)

        if not flag or not isinstance(flag, str) or flag.lower() not in ['t', 'a']:
            raise ValueError("Invalid flag. Please provide 'T' for truncate or 'A' for append.")

        if not self._table_exists(from_dataset_name, from_table_name):
            logging.warning(f'Table `{self.project_id}.{from_dataset_name}.{from_table_name}` does not exist. No data copied.')
            return

        if not self._table_exists(to_dataset_name, to_table_name):
            logging.warning(f'Table `{self.project_id}.{to_dataset_name}.{to_table_name}` does not exist. No data copied.')
            return

        if flag.lower() == 't':
            truncate_query = f"TRUNCATE TABLE `{self.project_id}.{to_dataset_name}.{to_table_name}`"
            self.client.query(truncate_query).result()
            logging.info(f'Table `{self.project_id}.{to_dataset_name}.{to_table_name}` truncated successfully.')

        if flag.lower() in ['t', 'a']:
            sql_query = f"""
                INSERT INTO `{self.project_id}.{to_dataset_name}.{to_table_name}`
                SELECT * FROM `{self.project_id}.{from_dataset_name}.{from_table_name}`
            """
            query_job = self.client.query(sql_query)
            query_job.result()
            logging.info(f'Data copied from `{self.project_id}.{from_dataset_name}.{from_table_name}` to `{self.project_id}.{to_dataset_name}.{to_table_name}`.')
        else:
            logging.warning(f'Invalid flag {flag}. Pass T for truncate and A for Append data')
