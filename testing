# my_library.py

from datetime import datetime, timedelta
from airflow.contrib.operators.bigquery_operator import BigQueryOperator
import pendulum

class MyLibrary:
    """A library for common functions used in Airflow DAGs."""

    def __init__(self):
        """Initialize the library."""
        pass

    @staticmethod
    def load_report_version(report_name, current_year, curr_quarter, report_dataset, rr_version, Load_Report_Version, BQ_CONN_ID, DAG, **kwargs):
        """
        Load the report version into BigQuery.

        Args:
            report_name (str): Name of the report.
            current_year (int): Current year.
            curr_quarter (str): Current quarter.
            report_dataset (str): BigQuery dataset for reports.
            rr_version (str): BigQuery table for report versions.
            Load_Report_Version (str): Path to the SQL file for loading report versions.
            BQ_CONN_ID (str): BigQuery connection ID.
            DAG (airflow.DAG): The DAG instance.
            **kwargs: Additional keyword arguments passed by Airflow.

        Returns:
            None
        """
        current_date = datetime.now(pendulum.timezone("America/Chicago"))
        CurrentDateTime = kwargs['ts']
        VersionSourceCode = "{}-{}-{};{}".format(report_name, current_year, curr_quarter, CurrentDateTime).replace("T", " ")
        print(VersionSourceCode)

        sql_script = MyLibrary.read_SQL_file(Load_Report_Version)
        sql_base = '{}'.format(sql_script)

        run_rep_version = BigQueryOperator(
            task_id="Report_Version",
            sql=sql_base.format(report_dataset=report_dataset, rr_version=rr_version),
            destination_dataset_table=f"{report_dataset}.{rr_version}",
            query_params=[
                {'name': "CreateTimestamp",
                 'parameterType': {'type': "STRING"},
                 'parameterValue': {'value': CurrentDateTime}
                 },
                {'name': "VersionSourceCode",
                 'parameterType': {'type': "STRING"},
                 'parameterValue': {'value': VersionSourceCode}
                 },
                {'name': "ReportYear",
                 'parameterType': {'type': "STRING"},
                 'parameterValue': {'value': current_year}
                 },
                {'name': "ReportPeriod",
                 'parameterType': {'type': "STRING"},
                 'parameterValue': {'value': curr_quarter}
                 },
                {'name': "report",
                 'parameterType': {'type': "STRING"},
                 'parameterValue': {'value': report_name}
                 }],
            write_disposition='WRITE_APPEND',
            create_disposition='CREATE_NEVER',
            allow_large_results=True,
            use_legacy_sql=False,
            bigquery_conn_id=BQ_CONN_ID,
            execution_timeout=timedelta(minutes=30),
            retries=3,
            retry_delay=timedelta(minutes=1),
            dag=DAG
        )

        run_rep_version.execute(context=kwargs)

    @staticmethod
    def read_SQL_file(file_path):
        """
        Read the content of an SQL file.

        Args:
            file_path (str): Path to the SQL file.

        Returns:
            str: Content of the SQL file.
        """
        # Your implementation of reading SQL file
        pass
